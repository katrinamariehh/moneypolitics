
import model
import csv
import datetime
import json
import os
import path_feed
from bs4 import BeautifulSoup


def convert_datetime(date):
	# conver MM/DD/YYYY into a datetime object
	datetime.datetime.strptime(date, "%m-%d-%Y")


def load_CampaignFin_cands(session):
    # function for loading candidates as objects into the database
    # using the paths genereated by the path_feed file
    for path in fpaths['cands']:
    	# open each file in the list
	    with open(path) as f:
	        reader = csv.reader(f, delimiter = ",", quotechar = "|")
	        for row in reader:
	        # setting row info from file as an object to go into the database
	            cand_Cycle, cand_FECCandID, cand_CID, cand_FirstLastP, cand_Party, cand_DistIDRunFor, cand_DistIDCurr, cand_CurrCand, cand_CycleCand, cand_CRPICO, cand_RecipCode, cand_NoPacs = row
	            cand = model.Candidate(Cycle=cand_Cycle,
	            					   FECCandID=cand_FECCandID,
	            					   CID=cand_CID,
	            					   FirstLastP=cand_FirstLastP,
	            					   Party=cand_Party,
	            					   # DistIdRunFor=cand_DistIdRunFor,
	            					   # CurrCand=cand_CurrCand,
	            					   # CycleCand=cand_CycleCand,
	            					   CRPICO=cand_CRPICO,
	            					   RecipCode=cand_RecipCode)
	            session.add(cand)
    session.commit()

def load_CampaignFin_cmtes(session):
	# function for loading committees as objects into the database
	# using the paths generated by the path_feed file
	for path in fpaths['cmtes']:
		# open each file in the list
		with open(path) as f:
			reader = csv.reader(f, delimiter = ',', quotechar = '|')
			for row in reader:
			# setting row info from file as an object to add to the database
				cmte_Cycle, cmte_CmteID, cmte_PACShort, cmte_Affiliate, cmte_Ultorg, cmte_RecipID, cmte_RecipCode, cmte_FECCandID, cmte_Party, cmte_PrimCode, cmte_Source, cmte_Sensitive, cmte_Foreign, cmte_Active = row
				# if I want to use Ultorg I have to fix the unicode thing (run seed and inlude Ultorg and you'll see the error)
				# cmte_Ultorg = unicode(cmte_Ultorg)
				try:
					cmte = model.Committee(Cycle=cmte_Cycle,
										   CmteID=cmte_CmteID,
										   PACShort=cmte_PACShort,
										   Affiliate=cmte_Affiliate,
										   # Ultorg=cmte_Ultorg,
										   RecipID=cmte_RecipID,
										   RecipCode=cmte_RecipCode,
										   FECCandID=cmte_FECCandID,
										   Party=cmte_Party,
										   PrimCode=cmte_PrimCode,
										   Source=cmte_Source,
										   # Sensitive=cmte_Sensitive,
										   # Foreign=cmte_Foreign,
										   Active=cmte_Active)
					session.add(cmte)
					session.commit()
				except:
					print row
					break
	

def loadCampaignFin_indiv(session):
	# function for loading individual as objects into the database
	# using the paths generated by the path_feed file
	for path in fpaths['indivs']:		
		# open each file in the list
		with open(path) as f:
			reader = csv.reader(f, delimiter = ',', quotechar = '|')
			for row in reader:
			# setting row info from file as an object to add to the database
				indiv_Cycle, indiv_FECTransID, indiv_ContribID, indiv_Contrib, indiv_RecipID, indiv_Orgname, indiv_UltOrg, indiv_RealCode, indiv_Date, indiv_Amount, indiv_Street, indiv_City, indiv_State, indiv_ZIP, indiv_RecipCode, indiv_Type, indiv_CmteID, indiv_OtherID, indiv_Gender, indiv_Microfilm, indiv_Occupation, indiv_Employer, indiv_Source = row

				# indiv_Cycle, indiv_FECTransID, indiv_ContribID, indiv_Contrib, indiv_RecipID, indiv_Orgname, indiv_UltOrg, indiv_RealCode, indiv_Date, indiv_Amount, indiv_Street, indiv_City, indiv_State, indiv_ZIP, indiv_RecipCode, indiv_Type, indiv_CmteID, indiv_OtherID, indiv_Gender, indiv_FecOccEmp, indiv_Microfilm, indiv_Occupation, indiv_Employer, indiv_Source fields before 2012

				indiv = model.Individual(Cycle=indiv_Cycle, 
										 FECTransID=indiv_FECTransID, 
										 ContribID=indiv_ContribID, 
										 Contrib=indiv_Contrib, 
										 RecipID=indiv_RecipID, 
										 Orgname=indiv_Orgname, 
										 UltOrg=indiv_UltOrg, 
										 RealCode=indiv_RealCode, 
										 Date=convert_datetime(indiv_Date), 
										 Amount=indiv_Amount, 
										 Street=indiv_Street, 
										 City=indiv_City, 
										 State=indiv_State, 
										 ZIP=indiv_ZIP, 
										 RecipCode=indiv_RecipCode, 
										 Type=indiv_Type, 
										 CmteID=indiv_CmteID, 
										 OtherID=indiv_OtherID, 
										 Gender=indiv_Gender,
										 Microfilm=indiv_Microfilm, 
										 Occupation=indiv_Occupation, 
										 Employer=indiv_Employer, 
										 Source=indiv_Source)
				session.add(indiv)
				print indiv_ContribID
	session.commit()

def loadCampaignFin_PAC(session):
	# function for loading pac objects into the database
	# use the path list generated by path_feed
	for path in fpaths['pacs']
		# open each file in the list
		with open(path) as f:
			reader = csv.reader(f, delimiter = ',', quotechar = '|')
			for row in reader:
			# setting row info from file as an object to add to the database
				PAC_Cycle, PAC_FECRecNo, PAC_PACID, PAC_CID, PAC_Amount, PAC_Date,PAC_RealCode, PAC_Type, PAC_DI, PAC_FECCandID = row
				PAC = model.PAC(Cycle=PAC_Cycle, 
								FECRecNo=PAC_FECRecNo, 
								PACID=PAC_PACID, 
								CID=PAC_CID, 
								Amount=PAC_Amount, 
								Date=convert_datetime(PAC_Date), 
								RealCode=PAC_RealCode, 
								Type=PAC_Type, 
								DI=PAC_DI, 
								FECCandID=PAC_FECCandID)
				session.add(PAC)
	session.commit()

def loadCampaignFin_PAC_other(session):
	# function for loading pac_other objects in the database
	for path in fpaths['pac_other']
		# using the paths generated by path_feed, open each path
		with open(path) as f:
			# read in each file in the list
			reader = csv.reader(f, delimiter = ',', quotechar = '|')
			for row in reader:
			# setting row info from file as an object to add to the database
				PAC_other_Cycle, PAC_other_FECRecNo, PAC_other_Filerid, PAC_DonorCmte, PAC_other_ContribLendTrans, PAC_other_City, PAC_other_State, PAC_other_ZIP, PAC_other_FECOccEmp, PAC_other_Primcode, PAC_other_Date, PAC_other_Amount, PAC_other_RecipID, PAC_other_Party, PAC_other_Otherid, PAC_other_RecipCode, PAC_other_RecipPrimcode, PAC_other_Amend, PAC_other_Report, PAC_other_PG, PAC_other_Microfilm, PAC_other_Type, PAC_other_RealCode, PAC_other_Source = row
				PAC_other = model.PAC_other(Cycle=PAC_other_Cycle, 
											FECRecNo=PAC_other_FECRecNo, 
											Filerid=PAC_other_Filerid, 
											# ContribLendTrans=PAC_other_ContribLendTrans,
											City=PAC_other_City, 
											State=PAC_other_State, 
											ZIP=PAC_other_ZIP, 
											FECOccEmp=PAC_other_FECOccEmp,
											PrimCode=PAC_other_Primcode, 
											Date=convert_datetime(PAC_other_Date), 
											Amount=PAC_other_Amount, 
											RecipID=PAC_other_RecipID, 
											Party=PAC_other_Party, 
											Otherid=PAC_other_Otherid, 
											RecipCode=PAC_other_RecipCode,
											RecipPrimCode=PAC_other_RecipPrimcode,
											# Amend=PAC_other_Amend, 
											# Report=PAC_other_Report, 
											# PG=PAC_other_PG, 
											# Microfilm=PAC_other_Microfilm, 
											# Type=PAC_other_Type, 
											RealCode=PAC_other_RealCode)
											# Source=PAC_other_Source)
				session.add(PAC_other)
	session.commit()
# to load a json file and dump it to a dictionary, use json.load()

def load_bills(session):
	# function to create bill objects to database
	for bill in cpaths['bills']:
		b = open(bill)
		bill_dict = json.load(b)

		# this info needs to go on the bill table
		bill_id = bill_dict['bill_id']
		bill_title = bill_dict['titles'][0]['title']
		# bill_type = bill_dict['bill_type']
		# bill_congress = bill_dict['congress']
		# bill_number = bill_dict['number']
		bill_popular_title = bill_dict['popular_title']
		bill_short_title = bill_dict['short_title']
		

		top_subject = bill_dict['subjects_top_term']
		sponsor = bill_dict['sponsor']['thomas_id']

		Bill = model.Bill(bill_id=bill_id,
						  bill_title=bill_title,
						  bill_popular_title=bill_popular_title,
						  bill_short_title=bill_short_title,
						  bill_subject=top_subject
						  )
		session.add(Bill)

		# sponsor data needs to go into a different table (sponsors)--can I create records in different tables in the same function?

		cosponsor_list = bill_dict['cosponsors']
		cosponsor_ids = [sponsor]
		for cosponsor in cosponsor_list:
			cosponsor_ids.append(cosponsor['thomas_id'])
		cosponsors = cosponsor_ids
		for cosponsor in cosponsors:
			Sponsor = model.Sponsor(bill_id=bill_id,
									thomas_id=cosponsor)
			session.add(Sponsor)

		subjects = bill_dict['subjects']
		for subject in subjects:
			Subject = model.Subjects(bill_id=bill_id,
									bill_subject=subject)
			session.add(Subject)
	session.commit()


def load_votes(session):
	# votes are essentially a way to connect legislators to bills

	# read each file included in the list created by path_feed into the database
	for vote in cpaths['votes']:
		# open the file
		v = open(vote)
		vote_dict = json.load(v)
		# probably need to include the date here somewhere?
		# creating the bill_id
		vote_bill = vote_dict['bill']['type']
		vote_bill_number = vote_dict['number']
		vote_bill_congress = vote_dict['congress']
		vote_bill_id = str(vote_bill) + str(vote_bill_number) + '-' + str(vote_bill_congress)
		# will need to reference bill id and vote category
		# I probably only care about one category of vote

		vote_id = vote_dict['vote_id']
		vote_category = vote_dict['category']
		vote_result = vote_dict['result']
		Vote = model.Vote(vote_id=vote_id,
						  vote_category=vote_category,
						  vote_result=vote_result)
		session.add(Vote)

		vote_types = vote_dict['votes'].keys() # a dictionary where the keys are 'Yea', 'Nay', 'Present', 'Not Voting' (but not all votes are the same in this respect--some have 'Aye' and 'No')
		for vote_type in vote_types:
			legislator_ids = []
			voters = vote_dict['votes'][vote_type]
			for voter in voters:
				legislator_ids.append(voter['id'])
			for legislator in legislator_ids:
				LegislatorBillVote = model.LegislatorBillVote(vote_id=vote_id,
								  				thomas_id=legislator,
												bill_id=vote_bill_id,
												vote_value=vote_type)
				session.add(LegislatorBillVote)

	session.commit()


def load_legislators(session):
	# UNICODE will need to cast some name-related fields to unicode
	# i.e. lastname = unicode(lastname)
	file_paths = ['data/people_data/legislators-current.csv', 'data/people_data/legislators-historic.csv']
	for path in file_paths:
		with open(path) as f:
			# open the legislators-currnet file to read in id info for current legislators

			reader = csv.reader(f, delimiter = ',')
			
			for row in reader:
				# assign field values for each row
				last_name,first_name,birthday,gender,position_type,state,party,url,address,phone,contact_form,rss_url,twitter,facebook,facebook_id,youtube,youtube_id,bioguide_id,thomas_id,opensecrets_id,lis_id,cspan_id,govtrack_id,votesmart_id,ballotpedia_id,washington_post_id,icpsr_id,wikipedia_id = row
				
				# reformat data as needed
				# lastname = unicode(lastname)
				# birthday = datetime.datetime.strptime(birthday, "%Y-%m-%d") # this should totally work but it doesn't; currently have it as a string in the database instead of a datetime object
				
				# assign the row values to class attributes in the model
				Legislator = model.Legislator(last_name=last_name,
											  first_name=first_name,
											  birthday=birthday,
											  gender=gender,
											  position_type=position_type,
											  state=state,
											  party=party,
											  bioguide_id=bioguide_id,
											  thomas_id=thomas_id,
											  opensecrets_id=opensecrets_id,
											  lis_id=lis_id,
											  govtrack_id=govtrack_id)
				session.add(Legislator)

	session.commit()

# TODO closing the files after I read them?

def load_legislator_legacy(session):
	# open the file
	r = open('data/people_data/people_legacy.txt')
	# cast the file to a BeautifulSoup object
	soup = BeautifulSoup(r)
	# locate all of the people in the file
	people = soup.findAll('person')
	people_dict = {}
	for person in people:
		govtrack_id = person.attrs.get('id')
		people_dict[str(id)] = {}
		# locate all of the roles for each person
		roles = person.findAll('role')
		# parse the attributes of each role
		for role in roles:
			startdate = datetime.datetime.strptime(role.attrs.get('startdate'), "%Y-%m-%d")
			enddate = datetime.datetime.strptime(role.attrs.get('enddate'), "%Y-%m-%d")
			if startdate > datetime.datetime(1955, 12, 13):
				chamber = role.attrs.get('type')
				party = role.attrs.get('party')
				state = role.attrs.get('state')
				district = role.attrs.get('district')
				LegislatorLegacy = model.LegislatorLegacy(govtrack_id=govtrack_id,
													chamber=chamber,
													startdate=startdate,
													enddate=enddate,
													party=party,
													state=state,
													district=district)
				session.add(LegislatorLegacy)

	session.commit()






def main(session):
	# load_CampaignFin_cands(session)
	# load_CampaignFin_cmtes(session)
	# loadCampaignFin_indiv(session)
	# loadCampaignFin_PAC(session)
	# loadCampaignFin_PAC_other(session)
	# load_bills(session)
	# load_votes(session)
	# load_legislators(session)
	# load_legislator_legacy(session)



if __name__ == "__main__":
    main(model.session)